#!/usr/bin/env python

# read terraform.tfstate file
# write ansible/inventory/hosts_terraform

import json
import sys

inventory_file = 'ansible/inventory/hosts_terraform'
hosts = []
tags = []
out = []

def usage():
  print ""
  print "usage: do_tf_inventory TF_STATE"
  print ""
  sys.exit(0)

def readTfStateFile(fName):
  try:
    with open(fName, 'rb') as f:
      return f.read()
  except IOError:
    print "Could not read terraform state file:", fName

def parseTags(obj):
  tOut = []
  count = int(obj[u'tags.#'])
  if count > 0:
    for index in range(count):
      tOut.append(obj['tags.'+str(index)])
  return tOut

def parseTfResources(json_data):
  try:
    resources = json_data[u'modules'][0][u'resources']
    for _idx, item in enumerate(resources):
      if resources[item][u'type'] == u'digitalocean_tag':
        obj = resources[item][u'primary'][u'attributes']
        tags.append({
          'id': obj[u'id'],
          'name': obj[u'name'],
        })
      if resources[item][u'type'] == u'digitalocean_droplet':
        obj = resources[item][u'primary'][u'attributes']
        hosts.append({
          'name': obj[u'name'],
          'ipv4_address': obj[u'ipv4_address'],
          'region': obj[u'region'],
          'tags': parseTags(obj)
        })
  except IOError:
    print "Could not read host from data:", fName

def writeInventoryFile():
  try:
    out.append("# Generated by Terraform\n")
    out.append("\n")
    for _idx, host in enumerate(hosts):
      line = host['name'] + ' ansible_host=' + host['ipv4_address'] + ' ansible_user=root' + "\n"
      out.append(line)
    out.append("\n")

    out.append("[debops_all_hosts]\n")
    for _idx, host in enumerate(hosts):
      line = host['name'] + "\n"
      out.append(line)
    out.append("\n")

    for _idx, tag in enumerate(tags):
      line = '[' + tag['name'] + "]\n"
      out.append(line)
      for _idx, host in enumerate(hosts):
        if tag['name'] in host['tags']:
          line = host['name'] + "\n"
          out.append(line)
      out.append("\n")
    out.append("\n")

    with open(inventory_file, 'w') as file:
      file.writelines(out)

  except IOError:
    print "Could not write inventory file:", fName

if __name__ == '__main__':
  if len(sys.argv) != 2:
    usage()
  try:
    state_file = readTfStateFile(sys.argv[1])
    json_data = json.loads(state_file)
    parseTfResources(json_data)
    writeInventoryFile()

  except: # catch *all* exceptions
   e = sys.exc_info()[1]
   print e
